<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-03-13T21:23:51+05:30</updated><id>http://localhost:4000/</id><title type="html">Nilmi’s Blog</title><subtitle>I am a senior software QA engineer with 4+ years experience and I enjoy writing test automation blog, travel photography and drone videography.</subtitle><entry><title type="html">Why Automate Your Software, Web, Mobile Apps?</title><link href="http://localhost:4000/general/2018/01/05/welcome-to-selenium0.html" rel="alternate" type="text/html" title="Why Automate Your Software, Web, Mobile Apps?" /><published>2018-01-05T08:10:20+05:30</published><updated>2018-01-05T08:10:20+05:30</updated><id>http://localhost:4000/general/2018/01/05/welcome-to-selenium0</id><content type="html" xml:base="http://localhost:4000/general/2018/01/05/welcome-to-selenium0.html">&lt;p&gt;&lt;img src=&quot;/images/general/manual-vs-automated/manual-and-automated.png&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Manual software testing is performed by a human sitting in front of a computer carefully going through application screens, trying various usage and input combinations, comparing the actual results with the expected results and recording their observations. Manual tests are repeated often during development cycles for source code changes and other situations like multiple operating environments and hardware configurations.&lt;/p&gt;
&lt;p&gt;An automated test suite can be use to playback pre-recorded and predefined actions, compare the results to the expected results and report the success or failure of these manual tests to a test engineer. Once automated tests are created they can easily be repeated and they can be extended to perform tasks impossible with manual testing. Because of this, in current software testing context people find that automated software testing is an essential component of successful development projects.&lt;/p&gt;
&lt;p&gt;Currently almost all the companies are moving towards software test automation, that means they have already implemented automated testing strategies into their testing procedures or they have plans to implement. So what makes software test automation this much trendy? These are some reasons.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. Saves time&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Software tests have to be repeated often during development cycles to ensure quality. Every time source code is modified software tests should be repeated. For each release of the software it may be tested on all supported operating systems and hardware configurations. Manually repeating these tests is costly and time consuming. Once created, automated tests can be run over and over again at no additional cost and they are much faster than manual tests. Automated software testing can reduce the time to run repetitive tests from days to hours. A time savings that translates directly into cost savings.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Early bug detection&lt;/strong&gt;
Automated tests which are scheduled to run in a pre defined frequency helps to identify bugs early.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Allows to perform tests 24/7&lt;/strong&gt;
Automated tests can be scheduled to run overnight, so the test team can check the test report next morning and take actions accordingly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Reusability&lt;/strong&gt;
Once the test scripts prepared using test automation tools, they can be saved for the future requirements. So, test team can utilize this test suites as many times as required especially for automating regression testing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Distributed Test Execution&lt;/strong&gt;
Automated testing comes with distributed testing feature. Testers can easily execute the test scripts on more than one computer on a shared network or server simultaneously. For example: Selenium Grid.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. Easy &amp;amp; Robust Reporting&lt;/strong&gt;
Automation testing tools have this amazing benefit of tracking each and every test script. Each and every test script executed can be seen in visual logs. These reports can clearly show the number of test scripts already executed, scheduled, their reported bugs and how they had been fixed. Also tools like TestNG provides different types of graphical reports which allows stakeholders to analyze the test results clearly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. Testing Capabilities&lt;/strong&gt;
When it comes to capabilities, automated testing tools can test the web applications on the various browsers available in the market via browser testing automation, example: Selenium. Also, when it comes to mobile application testing, testers can test them on various devices, example: Appium.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. Improves Accuracy&lt;/strong&gt;
Manual tests done by human can have errors, but since the automated tests&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">WebDriver Locators</title><link href="http://localhost:4000/selenium/webdriver/2017/11/07/webdriver-locators.html" rel="alternate" type="text/html" title="WebDriver Locators" /><published>2017-11-07T10:26:35+05:30</published><updated>2017-11-07T10:26:35+05:30</updated><id>http://localhost:4000/selenium/webdriver/2017/11/07/webdriver-locators</id><content type="html" xml:base="http://localhost:4000/selenium/webdriver/2017/11/07/webdriver-locators.html"></content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">What is Selenium Grid?</title><link href="http://localhost:4000/selenium/grid/2017/10/16/selenium-grid.html" rel="alternate" type="text/html" title="What is Selenium Grid?" /><published>2017-10-16T11:10:30+05:30</published><updated>2017-10-16T11:10:30+05:30</updated><id>http://localhost:4000/selenium/grid/2017/10/16/selenium-grid</id><content type="html" xml:base="http://localhost:4000/selenium/grid/2017/10/16/selenium-grid.html">&lt;p&gt;Selenium Grid allows to run tests on different machines against different browsers in parallel. That is running multiple tests at the same time against different machines,  different browsers and operating systems.
Essentially, Selenium grid support distributed test execution.
&lt;/p&gt;
&lt;p&gt; Selenium Grid has Hub and Node architecture.&lt;/p&gt;

&lt;h3 id=&quot;hub&quot;&gt;Hub&lt;/h3&gt;
&lt;p&gt;The Hub The hub is the central point where we load our tests into. There should only be one hub in a grid. The hub is launched only on a single machine, for example a computer whose operating system is Windows 10 and whose browser is IE. &lt;/p&gt;

&lt;h3 id=&quot;nodes&quot;&gt;Nodes&lt;/h3&gt;
&lt;p&gt;Nodes are the Selenium instances that will execute the tests that we on the hub. There can be one or more nodes in a grid. Nodes can be launched on multiple machines with different platforms and browsers. The machines running the nodes need not be the same platform as that of the hub.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/selenium-grid/what-is-selenium-grid/selenium-grid.png&quot; alt=&quot;Selenium Grid&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nodes need to register with the Selenium Server. After that if you try to execute a test, this request goes to the server and server knows which node can execute this test (which node having matching utilities for the test, for example: matching browser, operating system).
&lt;/p&gt;

&lt;h3 id=&quot;now-lets-check-the-configuration-of-hub-and-node&quot;&gt;Now let’s check the configuration of hub and node.&lt;/h3&gt;

&lt;h4 id=&quot;configuring-hub&quot;&gt;Configuring Hub:&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Go to the machine which you need to setup as hub and download the Selenium Server jar file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Place the Selenium Server .jar file anywhere in your HardDrive.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Go to the directory where you placed the Selenium Server .jar file from the command prompt. Type&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;java&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jar&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selenium&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;standalone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;2.30&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;jar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hub&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The hub should successfully be launched.&lt;/p&gt;

&lt;h4 id=&quot;configuring-node&quot;&gt;Configuring Node:&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Go to Machine you need to setup as node and download the Selenium Server jar file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Place the Selenium server .jar file anywhere in the drive. Launch a command prompt and navigate to driver location where the Selenium server .jar file is available. Type the code below. IP address and port '10.101.16.255' used here the that is where the hub is running. We also used port 5557 though you can choose any free port number you desire.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Java&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jar&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selenium&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;standalone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;2.46&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;jar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webdriver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;10.101&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;16.255&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4444&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;register&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5557&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;set-desired-capabilities-in-code&quot;&gt;Set desired capabilities in code&lt;/h3&gt;
&lt;p&gt;Then we need to set desired capabilities in code required for RemoteWebDriver.
Note: For this code we need to use RemoteWebDriver not the WebDriver.

Desired capabilities are used to set some properties for WebDriver, since not all server implementation will every webDriver feature supports.
Desired capabilities need to set in Selenium Grid setup for webDriver client code are,
Platform
BrowserName

Note: You can check browser and platform details of nodes from hub’s grid console. Just open the url displayed in cmd in browser. (localhost:port or 4444/grid/console)
&lt;/p&gt;</content><author><name></name></author><summary type="html">Selenium Grid allows to run tests on different machines against different browsers in parallel. That is running multiple tests at the same time against different machines, different browsers and operating systems. Essentially, Selenium grid support distributed test execution. Selenium Grid has Hub and Node architecture.</summary></entry><entry><title type="html">Implicit and Explicit Wait</title><link href="http://localhost:4000/selenium/webdriver/2017/04/12/impicit-and-explicit-wait.html" rel="alternate" type="text/html" title="Implicit and Explicit Wait" /><published>2017-04-12T16:40:15+05:30</published><updated>2017-04-12T16:40:15+05:30</updated><id>http://localhost:4000/selenium/webdriver/2017/04/12/impicit-and-explicit-wait</id><content type="html" xml:base="http://localhost:4000/selenium/webdriver/2017/04/12/impicit-and-explicit-wait.html">&lt;p&gt;&lt;img src=&quot;/images/selenium/implicit-and-explicit-wait/wait.png&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Two types of waits in Selenium.&lt;/p&gt;

&lt;h2 id=&quot;1-explicit-wait&quot;&gt;1. Explicit wait&lt;/h2&gt;

&lt;p&gt;This will make your code to wait for certain expected condition to occur before moving forward.
An explicit wait can be used where synchronization is needed, for example, the page is loaded but we are still waiting for a call to complete and an element to appear.
Selenium WebDriver provides,
..WebDriverWait
..ExpectedCondition
classes for implementing an explicit wait. The ExpectedCondition class provides a set of predefined conditions to wait before proceeding further in the code. An example of an explicit wait is:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;WebDriverWait&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;WebDriverWait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;until&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ExpectedConditions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;titleContains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;selenium&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;  &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ExpectedConditions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;elementTo&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;BeVisible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clickable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Or&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;	&lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;explicitWait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;WebDriver&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;WebDriverWait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;until&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ExpectedConditions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;elementToBeClickable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;By&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;partialLinkText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)));&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;New object of WebDriverWait -&amp;gt; call until method which is inherited from FluentWait class -&amp;gt; wait until expected conditions is true&lt;/p&gt;

&lt;h2 id=&quot;2--implicit-wait&quot;&gt;2.  Implicit wait&lt;/h2&gt;
&lt;p&gt;When an implicit wait is implemented in tests, if WebDriver cannot find an element in the Document Object Model (DOM), it will wait for a defined amount of time for the element to appear in the DOM. In other terms, an implicit wait polls the DOM for a certain amount of time when trying to find an element or elements if they are not immediately available.
Once set implicit wait is set for lifetime of driver object and for all elements.&lt;/p&gt;
&lt;h3 id=&quot;disadvantages&quot;&gt;Disadvantages:&lt;/h3&gt;
&lt;p&gt;Implicit waits can slow down your tests, because once set, the implicit wait is set for the life of the WebDriver object’s instance. This means that when an application responds normally, it will still wait for each element to appear in the DOM which increases the overall execution time.
Another downside is if for example you set the waiting limit to be 5 seconds and the elements appears in the DOM in 6 seconds, your tests will fail because you told it to wait a maximum of 5 seconds.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;	&lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;implicitWait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;WebDriver&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;manage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;timeouts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;implicitlyWait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;TimeUnit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SECONDS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;WebDriver class -&amp;gt; method manage() -&amp;gt; returns Interface WebDriver.Options -&amp;gt; call timeout method of options -&amp;gt;  returns Interface WebDriver.Timeouts -&amp;gt; call implicitlyWait()&lt;/p&gt;

&lt;p&gt;To summarize: Implicit wait time is applied to all elements in your script and Explicit wait time is applied only for a particular specified element.&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">First Selenium Test</title><link href="http://localhost:4000/selenium/webdriver/2017/03/11/first-selenium-test.html" rel="alternate" type="text/html" title="First Selenium Test" /><published>2017-03-11T10:50:05+05:30</published><updated>2017-03-11T10:50:05+05:30</updated><id>http://localhost:4000/selenium/webdriver/2017/03/11/first-selenium-test</id><content type="html" xml:base="http://localhost:4000/selenium/webdriver/2017/03/11/first-selenium-test.html"></content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Welcome to Selenium!!!</title><link href="http://localhost:4000/selenium/webdriver/2017/03/05/welcome-to-selenium.html" rel="alternate" type="text/html" title="Welcome to Selenium!!!" /><published>2017-03-05T10:48:15+05:30</published><updated>2017-03-05T10:48:15+05:30</updated><id>http://localhost:4000/selenium/webdriver/2017/03/05/welcome-to-selenium</id><content type="html" xml:base="http://localhost:4000/selenium/webdriver/2017/03/05/welcome-to-selenium.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry><entry><title type="html">Hello Cucumber!!!</title><link href="http://localhost:4000/cucumber/2017/02/05/hello-cucumber.html" rel="alternate" type="text/html" title="Hello Cucumber!!!" /><published>2017-02-05T10:20:24+05:30</published><updated>2017-02-05T10:20:24+05:30</updated><id>http://localhost:4000/cucumber/2017/02/05/hello-cucumber</id><content type="html" xml:base="http://localhost:4000/cucumber/2017/02/05/hello-cucumber.html">&lt;p&gt;&lt;img src=&quot;/images/cucumber/hello-cucumber/cucumber.png&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-is-cucumber&quot;&gt;What is Cucumber?&lt;/h2&gt;</content><author><name></name></author><summary type="html"></summary></entry></feed>